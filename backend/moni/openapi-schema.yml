openapi: 3.0.2
info:
  title: "Moni"
  version: "0.0.0"
  description: |
    Moni - A HTTP service monitoring solution OpenAPI schema.
    Checkout project on [Github](https://github.com/hibare/Moni).
  license:
    name: MIT
    url: https://github.com/hibare/Moni/blob/master/LICENSE
tags:
  - name: Admin
    description: Admin APIs.
  - name: Accounts
    description: API's to manage user details.
  - name: Token
    description: API's to manage authentication token.
  - name: Jobs
    description: |
      API's to manage Jobs.
      Each job an individual monitor to monitor a single service.
  - name: Jobs History
    description: API's to manage jobs history.
  - name: Notifiers
    description: |
      API's to manage all notifiers services.
      Notifiers are used by Jobs to send out alert for undesired monitoring responses.
  - name: Notifiers History
    description: API to manage notifiers history.
paths:
  /api/v1/admin/jobs/misfire/gracetime/:
    post:
      operationId: Update jobs misfire gracetime
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - Admin
  /api/v1/admin/jobs/misfire/gracetime/{uuid}/:
    post:
      operationId: Update a job misfire gracetime
      description: ''
      parameters:
      - name: uuid
        in: path
        required: true
        description: 'Job UUID'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        '200':
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/JobsMisfireGraceTime"
          description: ''
      tags:
      - Admin
  /api/v1/accounts/:
    get:
      operationId: Get User
      description: Get User details
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
          description: ""
      tags:
        - Accounts
    patch:
      operationId: Update user
      description: Update user detauls
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Accounts"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
          description: ""
      tags:
        - Accounts
  /api/v1/accounts/password/:
    put:
      operationId: Change Password
      description: Change Password
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: "Password chaged"
      tags:
        - Accounts
  /api/v1/accounts/token/:
    post:
      operationId: Create / Get Token
      description: Create or get API Token
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIToken"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIToken"
          description: ""
        "400":
          $ref: "#/components/responses/BadRequestError"
      tags:
        - Token
    put:
      operationId: Regenerate API Token
      description: Regenerate API token
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIToken"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Token
    delete:
      operationId: Delete API token
      description: Delete API token
      parameters: []
      responses:
        "204":
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Token
  /api/v1/accounts/jwt/:
    post:
      operationId: Obtain JWT
      description:
        "Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JWTTokenObtainPair"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/JWTTokenObtainPair"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/JWTTokenObtainPair"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTTokenObtainPair"
          description: ""
      tags:
        - Token
  /api/v1/accounts/jwt/refresh/:
    post:
      operationId: Refresh JWT
      description:
        "Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JWTTokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/JWTTokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/JWTTokenRefresh"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTTokenRefresh"
          description: ""
      tags:
        - Token
  /api/v1/accounts/jwt/verify/:
    post:
      operationId: Verify JWT
      description:
        "Takes a token and indicates if it is valid.  This view provides
        no

        information about a token's fitness for a particular use."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JWTTokenVerify"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/JWTTokenVerify"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/JWTTokenVerify"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTTokenVerify"
          description: ""
      tags:
        - Token
  /api/v1/jobs/:
    get:
      operationId: List Jobs
      description: List all Jobs
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Jobs
    post:
      operationId: New Job
      description: Create new Job
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Jobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Jobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Jobs"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/:
    get:
      operationId: Job details
      description: Get a Job details
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
    put:
      operationId: Update Job
      description: Update a Job
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Jobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Jobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Jobs"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
    patch:
      operationId: Partial update Job
      description: Partial update a Job
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Jobs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Jobs"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Jobs"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
    delete:
      operationId: Delete Job
      description: Delete a Job
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "204":
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/pause/:
    post:
      operationId: Pause Job
      description: Pause a Job execution
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/resume/:
    post:
      operationId: Resume Job
      description: Resume Job execution
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/uptime/:
    get:
      operationId: Job uptime
      description: Returns a job uptime (Percentage)
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobsUptime"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/response/:
    get:
      operationId: Job response time
      description: Job response time (avg. seconds)
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobsResponse"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such job"
      tags:
        - Jobs
  /api/v1/jobs/{uuid}/favicon/:
    get:
      operationId: favicon
      description: "Update favicon URL with the latest one."
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Job not found"
      tags:
        - Jobs
  /api/v1/jobs/history/:
    get:
      operationId: List jobs execution history
      description: "List all jobs execution history"
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobsHistory"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Jobs History
  /api/v1/jobs/{uuid}/history/:
    get:
      operationId: Get a Job History
      description: Get a Job execution history
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobsHistory"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Job history not found"
      tags:
        - Jobs History
    delete:
      operationId: Delete a Job history
      description: Delete a Job execution history
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Jobs.
          schema:
            type: string
      responses:
        "204":
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Job history not found"
      tags:
        - Jobs History
  /api/v1/jobs/status/:
    get:
      operationId: Jobs Status
      description: "Return a flag indicating overall status of all jobs"
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobsStatus"
          description: ""
      tags:
        - Jobs
  /api/v1/notifiers/:
    get:
      operationId: List Notifiers
      description: List all Notifiers
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notifiers"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Notifiers
    post:
      operationId: Create a Notifier
      description: Create new Notifier
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notifiers"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Notifiers"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Notifiers"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifiers"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Notifiers
  /api/v1/notifiers/test/:
    post:
      operationId: Test a notifier
      description: Test notifier wihtout saving
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notifiers"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Notifiers"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Notifiers"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsTest"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          description: "Request error / notificaiton test failed"
      tags:
        - Notifiers
  /api/v1/notifiers/{uuid}/:
    get:
      operationId: Get a Notifier
      description: Get a Notifier details
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifiers"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
      tags:
        - Notifiers
    put:
      operationId: Upate Notifier
      description: Update a Notifier details
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notifiers"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Notifiers"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Notifiers"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifiers"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
      tags:
        - Notifiers
    patch:
      operationId: Partial update Notifier
      description: Partial update a Notifier details
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notifiers"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Notifiers"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Notifiers"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifiers"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
      tags:
        - Notifiers
    delete:
      operationId: Delete Notifier
      description: Delete a Notifier
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "204":
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
      tags:
        - Notifiers
  /api/v1/notifiers/{uuid}/delivery/:
    get:
      operationId: Notifier Delivery
      description: Return notifier delivery percentage
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifiers.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsDelivery"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
      tags:
        - Notifiers
  /api/v1/notifiers/{uuid}/test/:
    post:
      operationId: Test a Notifier
      description: Test a Notifier endpoint
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsTest"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "No such notifier"
        "500":
          description: "Request error / notificaiton test failed"
      tags:
        - Notifiers
  /api/v1/notifiers/{uuid}/jobs/:
    get:
      operationId: Get jobs having notifier
      description: Return all jobs using this notifier
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Jobs"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Invalid notifier / No jobs found"
      tags:
        - Notifiers
  /api/v1/notifiers/history/:
    get:
      operationId: List notificaitons history
      description: List notificaitons history
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotifiersHistory"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Notifiers History
  /api/v1/notifiers/{uuid}/history/:
    get:
      operationId: Get a notifier history
      description: Return a notifier execution history
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotifiersHistory"
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Notifier history not found"
      tags:
        - Notifiers History
    delete:
      operationId: Delete a notifier history
      description: Delete a notifier execution history
      parameters:
        - name: uuid
          in: path
          required: true
          description: A unique value identifying this Notifier.
          schema:
            type: string
      responses:
        "204":
          description: ""
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "Notifier history not found"
      tags:
        - Notifiers History

security:
  - bearerAuth: []
components:
  responses:
    UnauthorizedError:
      description: API token is missing or invalid
    BadRequestError:
      description: Bad request, missing / invalid request parameters
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: API uses bearer authentication mechanism
  schemas:
    JobsMisfireGraceTime:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
    Accounts:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
        new_password_confirm:
          type: string
    APIToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
        - username
        - password
    JWTTokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
        firstname:
          type: string
          readOnly: true
        lastname:
          type: string
          readOnly: true
        fullname:
          type: string
          readOnly: true
        email:
          type: string
          readOnly: true
        is_staff:
          type: boolean
          readOnly: true
        is_superuser:
          type: boolean
          readOnly: true
      required:
        - username
        - password
    JWTTokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
        - refresh
    JWTTokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    Jobs:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
          pattern:
            "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\\
            d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\\
            [[0-9a-f:.]+\\]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1\
            -\uFFFF0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
            -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[/?#][^\\\
            s]*)?\\z"
        title:
          type: string
          maxLength: 50
        state:
          type: boolean
        headers:
          type: object
        notifiers:
          type: array
          items:
            type: string
        verify_ssl:
          type: boolean
        healthy:
          type: boolean
        interval:
          type: integer
          maximum: 2147483647
          minimum: 0
        success_status:
          type: array
          items:
            type: integer
            maximum: 2147483647
        check_redirect:
          type: boolean
        favicon_url:
          type: string
      required:
        - url
        - title
    JobsUptime:
      type: object
      properties:
        uptime:
          type: string
          readOnly: true
      required:
        - uptime
    JobsResponse:
      type: object
      properties:
        response:
          type: string
          readOnly: true
      required:
        - response
    JobsHistory:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          readOnly: true
        status_code:
          type: integer
          readOnly: true
        success:
          type: boolean
          readOnly: true
        response_time:
          type: number
          readOnly: true
        error:
          type: string
          readOnly: true
    JobsStatus:
      type: object
      properties:
        status:
          type: boolean
          readOnly: true
        jobs:
          type: boolean
          readOnly: true
    Notifiers:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          maxLength: 200
          pattern:
            "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\\
            d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\\
            [[0-9a-f:.]+\\]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1\
            -\uFFFF0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
            -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{2,5})?(?:[/?#][^\\\
            s]*)?\\z"
        type:
          enum:
            - slack
            - discord
            - webhook
            - gotify
          type: string
        description:
          type: string
      required:
        - url
        - type
        - description
    NotificationsDelivery:
      type: object
      properties:
        delivery:
          type: string
          readOnly: true
      required:
        - delivery
    NotificationsTest:
      type: object
      properties:
        status:
          type: boolean
          readOnly: true
        status_code:
          type: integer
          readOnly: true
        error:
          type: string
          readOnly: true
      required:
        - status
        - status_code
        - error
    NotifiersHistory:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
        timestamp:
          type: string
          readOnly: true
        status:
          type: boolean
          readOnly: true
        status_code:
          type: integer
          readOnly: true
        error:
          type: string
          readOnly: true
